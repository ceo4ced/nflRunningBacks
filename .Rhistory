dataset <- game.data[,c(1:2,9:11,47,50,53,54,57:68,69,70:74,100,103,106,107,110:121,122,123:127)]
dataset <-    dataset  %>% mutate(h_outcome=factor(ifelse(tournament_type=="National Championship" & h_points>a_points,1,0),levels=c(0,1))) %>% mutate(a_outcome=factor(ifelse(tournament_type=="National Championship" & a_points>h_points,1,0),levels=c(0,1)))
home.team <- dataset[,c(1:5,6:27,50)]
away.team <- dataset[,c(1:5,28:49,51)]
names(home.team) <- gsub("h_","",names(home.team))
names(away.team) <- names(home.team)
all.teams <- rbind(home.team,away.team)
all.teams <- all.teams %>% mutate_at(c(6:28), ~replace(., is.na(.), 0))
all.teams <- all.teams[,-c(1:5)]
train.index <- caret::createDataPartition(all.teams$outcome, p = .5, list = FALSE)
train <- all.teams[ train.index,]
test  <- all.teams[-train.index,]
# Create list to store confusion matrix results
datasets <<- list(train,test)
train.models.fit <<- list()
test.models.fit <<- list()
source('~/Dropbox/UNC/STOR320/Project/Presentation/Q1.R')
load.tourney()
source('~/Dropbox/UNC/STOR320/Project/Presentation/Q1.R')
load.tourney()
load.season()
load.data()
run()
reduct.pca()
require(dplyr)
require(ggplot2)
require(corrplot)
setwd("~/Documents/GitHub/nflRunningBacks")
nfl.data <- read.csv("data/train.csv",stringsAsFactors = FALSE)
data <- nfl.data[,c(12,15,16,19,20,21,25,26,27,28,29,30,31,32,33,34,35,37,44,2,1,11)]
data.rb <- data[data$Position=="RB",]
data.rb <- data.rb[, c(22,1,15,16,17,18,21,20,19,3,4,6,2,5,7,8,9,10,11,12,13,14)]
qwe.rb<- qwe %>%
mutate(ol=ifelse(grepl(" OL,",OffensePersonnel),as.numeric(6),as.numeric(5)),
rb=ifelse(grepl(" OL,",OffensePersonnel),as.numeric(2),strsplit(split=" RB,",x=OffensePersonnel)[[1]][1]),
te=ifelse(grepl(" OL,",OffensePersonnel),as.numeric(2),strsplit(split=" TE",x=strsplit(split=", ",x=OffensePersonnel)[[1]][1])))
rb.attr <- data.rb[,c(1:6)]
rb.gm.data <- data.rb[,c(1,7:22)]
splitTime <- function(x){
dHour <- as.numeric(substr(x,1,2))
dMin <- as.numeric(substr(x,4,5))
dSec <- as.numeric(substr(x,7,8))
dTime <- 3600*dHour + 60*dMin + dSec
dTime
}
handoffTime <- function(x,y){
ans <- splitTime(x) - splitTime(y)
if(ans<0)  ans <- ans + (24*60*60)
ans
}
## calculate delayed handooffs
rb.gm.data$TimeHandoff <- substr(rb.gm.data$TimeHandoff,12,19)
rb.gm.data$TimeSnap<- substr(rb.gm.data$TimeSnap,12,19)
rb.gm.data$handoffTime <- handoffTime(rb.gm.data$TimeHandoff,rb.gm.data$TimeSnap)
rb.gm.data <- rb.gm.data[rb.gm.data$handoffTime>=0,]
## Cleaning - removing N/A's - Will consider something else in the future
rb.gm.data[!is.na(rb.gm.data$DefendersInTheBox),]
rb.gm.data <- rb.gm.data[,-c(15,16)]
rm(data,nfl.data)
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = if(Yards > 5){as.numeric(1)}else{as.numeric(0)})%>%
transmute(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
agg.data.rb2 <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = if(Yards > 5){as.numeric(1)}else{as.numeric(0)})%>%
mutate(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
agg.data.rb2 <- agg.data.rb2[,c(1:20,22:32,21)]
View(agg.data.rb)
View(agg.data.rb)
data.rb <- data[data$Position=="RB",]
data.rb <- data.rb[, c(22,1,15,16,17,18,21,20,19,3,4,6,2,5,7,8,9,10,11,12,13,14)]
qwe.rb<- qwe %>%
mutate(ol=ifelse(grepl(" OL,",OffensePersonnel),as.numeric(6),as.numeric(5)),
rb=ifelse(grepl(" OL,",OffensePersonnel),as.numeric(2),strsplit(split=" RB,",x=OffensePersonnel)[[1]][1]),
te=ifelse(grepl(" OL,",OffensePersonnel),as.numeric(2),strsplit(split=" TE",x=strsplit(split=", ",x=OffensePersonnel)[[1]][1])))
rb.attr <- data.rb[,c(1:6)]
rb.gm.data <- data.rb[,c(1,7:22)]
splitTime <- function(x){
dHour <- as.numeric(substr(x,1,2))
dMin <- as.numeric(substr(x,4,5))
dSec <- as.numeric(substr(x,7,8))
dTime <- 3600*dHour + 60*dMin + dSec
dTime
}
handoffTime <- function(x,y){
ans <- splitTime(x) - splitTime(y)
if(ans<0)  ans <- ans + (24*60*60)
ans
}
## calculate delayed handooffs
rb.gm.data$TimeHandoff <- substr(rb.gm.data$TimeHandoff,12,19)
rb.gm.data$TimeSnap<- substr(rb.gm.data$TimeSnap,12,19)
rb.gm.data$handoffTime <- handoffTime(rb.gm.data$TimeHandoff,rb.gm.data$TimeSnap)
rb.gm.data <- rb.gm.data[rb.gm.data$handoffTime>=0,]
## Cleaning - removing N/A's - Will consider something else in the future
rb.gm.data[!is.na(rb.gm.data$DefendersInTheBox),]
rb.gm.data <- rb.gm.data[,-c(15,16)]
rm(data,nfl.data)
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = if(Yards > 5){as.numeric(1)}else{as.numeric(0)})%>%
transmute(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
agg.data.rb2 <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = if(Yards > 5){as.numeric(1)}else{as.numeric(0)})%>%
mutate(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
View(agg.data.rb2)
require(dplyr)
require(ggplot2)
require(corrplot)
setwd("~/Documents/GitHub/nflRunningBacks")
nfl.data <- read.csv("data/train.csv",stringsAsFactors = FALSE)
data <- nfl.data[,c(12,15,16,19,20,21,25,26,27,28,29,30,31,32,33,34,35,37,44,2,1,11)]
data.rb <- data[data$Position=="RB",]
data.rb <- data.rb[, c(22,1,15,16,17,18,21,20,19,3,4,6,2,5,7,8,9,10,11,12,13,14)]
rb.attr <- data.rb[,c(1:6)]
rb.gm.data <- data.rb[,c(1,7:22)]
splitTime <- function(x){
dHour <- as.numeric(substr(x,1,2))
dMin <- as.numeric(substr(x,4,5))
dSec <- as.numeric(substr(x,7,8))
dTime <- 3600*dHour + 60*dMin + dSec
dTime
}
handoffTime <- function(x,y){
ans <- splitTime(x) - splitTime(y)
if(ans<0)  ans <- ans + (24*60*60)
ans
}
## calculate delayed handooffs
rb.gm.data$TimeHandoff <- substr(rb.gm.data$TimeHandoff,12,19)
rb.gm.data$TimeSnap<- substr(rb.gm.data$TimeSnap,12,19)
rb.gm.data$handoffTime <- handoffTime(rb.gm.data$TimeHandoff,rb.gm.data$TimeSnap)
rb.gm.data <- rb.gm.data[rb.gm.data$handoffTime>=0,]
## Cleaning - removing N/A's - Will consider something else in the future
rb.gm.data[!is.na(rb.gm.data$DefendersInTheBox),]
## Cleaning - removing N/A's - Will consider something else in the future
rb.gm.data <- rb.gm.data[!is.na(rb.gm.data$DefendersInTheBox),]
summary(rb.gm.data)
rb.gm.data <- rb.gm.data[,-c(15,16)]
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = if(Yards > 5){as.numeric(1)}else{as.numeric(0)})%>%
transmute(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
View(agg.data.rb)
agg.data.rb2 <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = if(Yards > 5){as.numeric(1)}else{as.numeric(0)})%>%
mutate(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
agg.data.rb2 <- agg.data.rb2[,c(1:20,22:32,21)]
## want to group data by downs so each RB will have 4 entries
png(file="corr.png", res=300, width=4500, height=4500)
corr <- cor(agg.data.rb[,c(-1,-2,-3,-4,-7,-10,-11,-13,-14)],method = "spearman",use="pairwise.complete.obs")
corrplot(corr,method="color" ,addCoef.col="black",number.digits=2,number.cex = 1)
dev.off()
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = if(Yards > 5){as.numeric(1)}else{as.numeric(0)})%>%
ungroup() %>%
group_by(NflId,GameId,Quarter,Down, goodRun) %>%
transmute(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
View(agg.data.rb)
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0))) %>%
ungroup() %>%
group_by(NflId,GameId,Quarter,Down, goodRun) %>%
transmute(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox))
View(agg.data.rb)
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0))) %>%
ungroup() %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = goodRun)
rb.gm.data <- data.rb[,c(1,7:22)]
splitTime <- function(x){
dHour <- as.numeric(substr(x,1,2))
dMin <- as.numeric(substr(x,4,5))
dSec <- as.numeric(substr(x,7,8))
dTime <- 3600*dHour + 60*dMin + dSec
dTime
}
handoffTime <- function(x,y){
ans <- splitTime(x) - splitTime(y)
if(ans<0)  ans <- ans + (24*60*60)
ans
}
## calculate delayed handooffs
rb.gm.data$TimeHandoff <- substr(rb.gm.data$TimeHandoff,12,19)
rb.gm.data$TimeSnap<- substr(rb.gm.data$TimeSnap,12,19)
rb.gm.data$handoffTime <- handoffTime(rb.gm.data$TimeHandoff,rb.gm.data$TimeSnap)
rb.gm.data <- rb.gm.data[rb.gm.data$handoffTime>=0,]
## Cleaning - removing N/A's - Will consider something else in the future
rb.gm.data <- rb.gm.data[!is.na(rb.gm.data$DefendersInTheBox),]
rb.gm.data <- rb.gm.data[,-c(15,16)]
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0))) %>%
ungroup()
agg.data.rb <-   agg.data.rb %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgFieldType = mean(grassField),
avgFirstHalf = mean(firstHalf),
avgPlayLeft = mean(playLeft),
avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = goodRun)
View(agg.data.rb)
agg.data.rb <-   agg.data.rb %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = goodRun)
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0))) %>%
ungroup()
agg.data.rb <-   agg.data.rb %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgFirstDownRun = mean(firstDownRun),
avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = goodRun)
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
mutate(firstHalf = if(Quarter<=2){as.numeric(1.0)}else{as.numeric(0)},
playLeft = if(PlayDirection=="left"){as.numeric(1.0)}else{as.numeric(0)},
firstDownRun = if(Distance>Yards){as.numeric(1.0)}else{as.numeric(0)},
grassField = if(grepl("rass",Turf)){as.numeric(1.0)}else{as.numeric(0)},
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0))) %>%
ungroup()
agg.data.rb <-   agg.data.rb %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = goodRun)
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0)))
View(agg.data.rb)
## want to group data by downs so each RB will have 4 entries
png(file="corr.png", res=300, width=4500, height=4500)
corr <- cor(agg.data.rb[,c(-1,-2)],method = "spearman",use="pairwise.complete.obs")
corrplot(corr,method="color" ,addCoef.col="black",number.digits=2,number.cex = 1)
dev.off()
require(dplyr)
require(ggplot2)
require(corrplot)
require(caret)
setwd("~/Documents/GitHub/nflRunningBacks")
nfl.data <- read.csv("data/train.csv",stringsAsFactors = FALSE)
data <- nfl.data[,c(12,15,16,19,20,21,25,26,27,28,29,30,31,32,33,34,35,37,44,2,1,11)]
data.rb <- data[data$Position=="RB",]
data.rb <- data.rb[, c(22,1,15,16,17,18,21,20,19,3,4,6,2,5,7,8,9,10,11,12,13,14)]
rb.attr <- data.rb[,c(1:6)]
rb.gm.data <- data.rb[,c(1,7:22)]
splitTime <- function(x){
dHour <- as.numeric(substr(x,1,2))
dMin <- as.numeric(substr(x,4,5))
dSec <- as.numeric(substr(x,7,8))
dTime <- 3600*dHour + 60*dMin + dSec
dTime
}
handoffTime <- function(x,y){
ans <- splitTime(x) - splitTime(y)
if(ans<0)  ans <- ans + (24*60*60)
ans
}
## calculate delayed handooffs
rb.gm.data$TimeHandoff <- substr(rb.gm.data$TimeHandoff,12,19)
rb.gm.data$TimeSnap<- substr(rb.gm.data$TimeSnap,12,19)
rb.gm.data$handoffTime <- handoffTime(rb.gm.data$TimeHandoff,rb.gm.data$TimeSnap)
rb.gm.data <- rb.gm.data[rb.gm.data$handoffTime>=0,]
## Cleaning - removing N/A's - Will consider something else in the future
rb.gm.data <- rb.gm.data[!is.na(rb.gm.data$DefendersInTheBox),]
rb.gm.data <- rb.gm.data[,-c(15,16)]
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = sum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0)))
train.index <- caret::createDataPartition(agg.data.rb$goodRun,p=.7,list=FALSE)
train <- agg.data.rb[train.index,]
test <- agg.data.rb[-train.index,]
## want to group data by downs so each RB will have 4 entries
png(file="corr.png", res=300, width=4500, height=4500)
corr <- cor(train[,c(-1,-2)],method = "spearman",use="pairwise.complete.obs")
corrplot(corr,method="color" ,addCoef.col="black",number.digits=2,number.cex = 1)
dev.off()
pca1 = prcomp(agg.data.rb, scale. = TRUE)
# sqrt of eigenvalues
pca1$sdev
head(pca1$rotation)
pca1 = prcomp(agg.data.rb[,c(-1,-2)], scale. = TRUE)
# sqrt of eigenvalues
pca1$sdev
head(pca1$rotation)
pca1$x
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,Quarter,Down) %>%
transmute(avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = cumsum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
DefendersInTheBox = DefendersInTheBox,
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0)))
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,PlayId,Quarter,Down) %>%
mutate(avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = cumsum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0)))
agg.data.rb <- unique(rb.gm.data) %>%
group_by(NflId,GameId,PlayId, Quarter,Down) %>%
transmute(avgDistancePerDefenders = Distance/DefendersInTheBox,
avgYardsPerDefenders = Yards/DefendersInTheBox,
totalYards = cumsum(Yards),
avgYards = mean(Yards),
avgHandOfTime = mean(handoffTime),
avgDistance=mean(Distance),
DefendersInTheBox = DefendersInTheBox,
avgDefendersInTheBox = mean(DefendersInTheBox),
goodRun = ifelse(Yards > 5,as.numeric(1),as.numeric(0)))
pca1 = prcomp(agg.data.rb[,c(-1,-2)], scale. = TRUE)
# sqrt of eigenvalues
pca1$sdev
head(pca1$rotation)
pca1 = prcomp(agg.data.rb[,c(-1,-2,-3)], scale. = TRUE)
# sqrt of eigenvalues
pca1$sdev
head(pca1$rotation)
pca$rotation
pca1$rotation
pca1$x
